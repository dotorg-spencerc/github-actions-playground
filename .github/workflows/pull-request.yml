name: PullRequest

on:
  pull_request:
    branches:
      - main

jobs:
  LintAndUnitTests:
    name: LintAndUnitTests
    runs-on: ubuntu-latest

    steps:
      # checkout repo for the particular commit SHA
      - id: CheckoutRepo
        name: CheckoutRepo
        uses: actions/checkout@v2

      # checkout main as a branch so we can compare our changed files against it.
      - id: CheckoutMainBranch
        name: CheckoutMainBranch
        run: |
          git fetch --no-tags --depth=1 origin main

      - id: GetDiffFiles
        name: GetDiffFiles
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: |
            src/**/*.+(js|jsx)
            cypress/**/*.js
          FILES: |
            yarn.lock
            .eslintrc.json

      # Install node in the runner
      - id: InstallNode
        if: env.GIT_DIFF_FILTERED || env.MATCHED_FILES
        name: InstallNode
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Install and cache node modules
      - id: InstallNodeModules
        name: InstallNodeModules
        if: env.GIT_DIFF_FILTERED || env.MATCHED_FILES
        uses: bahmutov/npm-install@HEAD
        with:
          useRollingCache: true

      # Lint source files with differences
      - id: LintChangedFiles
        name: LintChangedFiles
        if: env.GIT_DIFF && !env.MATCHED_FILES
        run: npx eslint ${{ env.GIT_DIFF_FILTERED }} --max-warnings 0 # e.g. yarn eslint 'src/App.js'

      # Run a lint on all files if there are changes to yarn.lock or .eslintrc
      - id: LintAllFiles
        name: LintAllFiles
        if: env.GIT_DIFF && env.MATCHED_FILES
        run: npm run lint -- --max-warnings 0

      # Run tests
      - id: RunTests
        name: RunTests
        if: env.GIT_DIFF_FILTERED || env.MATCHED_FILES
        run: |
          npx yarn test --ci --reporters='default' --changedSince=origin/main

      - id: Success
        name: Success âœ…
        if: ${{ (env.GIT_DIFF_FILTERED || env.MATCHED_FILES) && success() }}
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --header 'content-type: application/json' --data '{
            "context": "tests",
            "state": "success",
            "description": "Checks passed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
      - id: Failure
        name: Failure ðŸš¨
        if: ${{ (env.GIT_DIFF_FILTERED || env.MATCHED_FILES) && failure() }}
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --header 'content-type: application/json' --data '{
            "context": "tests",
            "state": "failure",
            "description": "Checks failed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
